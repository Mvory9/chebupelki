// –ò–º–ø–æ—Ä—Ç—ã
import { MongoClient } from "mongodb";
import { Keyboard, VK } from "vk-io";
import random from "random";
import fs from 'fs';
import cron from 'node-cron';

// –ö–æ–Ω—Ñ–∏–≥
const cfg = JSON.parse(fs.readFileSync('./cfg.json', 'utf8'));

// –ú–æ–Ω–≥–æ–î–ë
const client = new MongoClient(cfg.mongoIp);
const users = client.db(cfg.name.toLowerCase()).collection(`users`);
const posts = client.db(cfg.name.toLowerCase()).collection(`posts`);
const convs = client.db(cfg.name.toLowerCase()).collection(`convs`);

// –ö–æ–º–∞–Ω–¥—ã
import CMD from "./commands.js";

// –¢–æ–∫–µ–Ω
const vk = new VK({
    token: cfg.token
})

// –ò–≤–µ–Ω—Ç—ã
vk.updates.on('message_new', async (context) => {
    if (context.isOutbox || context.isGroup || !context.text) return;

    // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è
    const { text, peerId, senderId, isChat } = context;
    const cmd = context.text.toLowerCase();

    // –°–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ
    if (isChat) {
        // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            await client.connect();
            await users.updateOne({ id: senderId }, { $inc: { balance: 5 } });
        } catch (err) { console.log(err); } finally { await client.close(); }

        if (cmd.startsWith('–æ—Ç–≤–µ—Ç ') || cmd.startsWith('jndtn ')) {
            try {
                const cmdd = cmd.slice(6);
                await client.connect();
                const conv = await convs.findOne({ id: peerId });
                const vkUser = await vk.api.users.get({ user_ids: senderId });
                const { first_name, last_name } = vkUser[0];

                if (cmdd == conv.quiz.answer) {
                    await context.send(`‚ö† –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç [id${senderId}|${first_name} ${last_name}]\n\nüëë –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - ${conv.quiz.answer}\n\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é - 0.${conv.quiz.prize} —Ä—É–±–ª–µ–π.`)
                    await convs.updateOne({ id: peerId }, { $set: { "quiz.answer": null, "quiz.value": null, "quiz.prize": 0 } });
                    await users.updateOne({ id: senderId }, { $inc: { balance: conv.quiz.prize } });

                    await vk.api.messages.send({
                        random_id: random.int(0, 999999),
                        message: `üï∞ –°–ª–µ–¥—É—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`,
                        peer_id: peerId
                    }).catch(err => {});
                } else if (!conv.quiz.value) {
                    await context.reply(`–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç!`);
                } else {
                    await context.reply(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!`);
                }

            } catch (err) { console.log(err); } finally { await client.close(); }
        }

    // –°–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°
    } else {
        if (cmd === `–Ω–∞—á–∞—Ç—å` || cmd === `–º–µ–Ω—é`) {
            await context.send(`–ú–µ–Ω—é:`, {
                keyboard: Keyboard.builder()
                    .textButton({ label: `üéÅ –ë–æ–Ω—É—Å`, color: Keyboard.POSITIVE_COLOR })
                    .row()
                    .textButton({ label: `üíº –ü—Ä–æ—Ñ–∏–ª—å`, color: Keyboard.PRIMARY_COLOR })
                    .textButton({ label: `üí∏ –í—ã–≤–µ—Å—Ç–∏`, color: Keyboard.POSITIVE_COLOR })
            })
        }

        else if (cmd === `üéÅ –±–æ–Ω—É—Å`) {
            try {
                await client.connect();
                const user = await users.findOne({ id: senderId });
                const timestamp = Math.floor(Date.now() / 1000);

                const bonus = random.int(10, 50)
                if (timestamp - user.lastGetBonus >= 86400) {
                    await context.send(`‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å +${bonus/100}‚ÇΩ\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å ${(user.balance+bonus)/100}‚ÇΩ`);
                    await users.updateOne({ id: senderId }, { $set: { lastGetBonus: timestamp }, $inc: { balance: bonus } });
                } else {
                    await context.send(`‚õî –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${Math.floor((86400 - (timestamp - user.lastGetBonus))/3600)}:${Math.floor((86400 - (timestamp - user.lastGetBonus))/60)%60}:${Math.floor((86400 - (timestamp - user.lastGetBonus))%60)}`);
                }
            } catch (err) { console.log(err); } finally { await client.close(); }
        }
        
        else if (cmd === `üíº –ø—Ä–æ—Ñ–∏–ª—å`) {
            try {
                await client.connect();
                const user = await users.findOne({ id: senderId });
                const vkUser = await vk.api.users.get({ user_ids: user.id })

                await context.send(`${vkUser[0].first_name}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜî –ê–π–¥–∏: ${senderId}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n‚ù§ –õ–∞–π–∫–æ–≤: ${user.likes}\n\n‚ùó –°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞: ${user.access ? `–í–∫–ª—é—á—ë–Ω ‚úÖ` : `–û—Ç–∫–ª—é—á—ë–Ω ‚õî`} `);
            } catch (err) { console.log(err); } finally { await client.close(); }
        }
        
        else if (cmd === `üí∏ –≤—ã–≤–µ—Å—Ç–∏`) {
            try {
                await client.connect();
                // const user = await users.findOne({ id: senderId });

                await context.send(`–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ...`);
            } catch (err) { console.log(err); } finally { await client.close(); }
        }
    }
});

vk.updates.on('group_join', async (context) => {
    await CMD.reg(context.userId);

    await vk.api.messages.send({
        random_id: random.int(0, 999999),
        message: `üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É +1.00‚ÇΩ!`,
        user_id: context.userId
    }).catch(err => {});

    try {
        await client.connect();
        const user = await users.findOne({ id: context.userId });
        if (user.subscriber) return;
        await users.updateOne({ id: context.userId }, { $set: { subscriber: true }, $inc: { balance: 100 } });
    } catch (err) { console.log(err); } finally { await client.close(); }
})

vk.updates.on('group_leave', async (context) => {
    await CMD.reg(context.userId);
    await vk.api.messages.send({
        random_id: random.int(0, 999999),
        message: `üíî –ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–∞—Å –ø–æ–∫–∏–Ω—É–ª–∏`,
        user_id: context.userId
    }).catch(err => {});

})

vk.updates.on('wall_reply_new', async (context) => {
    await CMD.reg(context.fromId);

    try {
        await client.connect();
        const post = await posts.findOne({ id: context.objectId });

        if (!post) {
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0'); // –Ø–Ω–≤–∞—Ä—å - –Ω—É–ª–µ–≤–æ–π –º–µ—Å—è—Ü!
            const year = today.getFullYear();
            const hours = String(today.getHours()).padStart(2, '0');
            const minutes = String(today.getMinutes()).padStart(2, '0');
            const seconds = String(today.getSeconds()).padStart(2, '0');
            
            const formattedDate = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;

            const data = {
                id: context.objectId,
                user: context.fromId,
                date: formattedDate
            };
  
            await posts.insertOne(data);

            const randomBonus = random.int(10, 50);
            await users.updateOne({ id: context.fromId }, { $inc: { balance: randomBonus } });

            await vk.api.wall.createComment({
                owner_id: context.ownerId,
                post_id: context.objectId,
                message: `[[id${context.fromId}|‚úÖ]] –ù–∞–≥—Ä–∞–¥–∞ ${randomBonus/100}‚ÇΩ –∑–∞ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`,
                reply_to_comment: context.id
            }).catch(err => {});
        }
    } catch (err) { console.log(err); } finally { await client.close(); }
})

vk.updates.on('like_add', async (context) => {
    await CMD.reg(context.likerId);
    try {
        await client.connect();
        await users.updateOne({ id: context.fromId }, { $inc: { balance: 10 } });

        await vk.api.messages.send({
            random_id: random.int(0, 999999),
            message: `‚ù§ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç +0.10‚ÇΩ`,
            user_id: context.likerId
        }).catch(err => {});

    } catch (err) { console.log(err); } finally { await client.close(); }
})

vk.updates.on('like_remove', async (context) => {
    await CMD.reg(context.likerId);
    try {
        await client.connect();
        await users.updateOne({ id: context.fromId }, { $inc: { balance: -15 } });

        await vk.api.messages.send({
            random_id: random.int(0, 999999),
            message: `üíî –®—Ç—Ä–∞—Ñ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ —Å –ø–æ—Å—Ç–∞ -0.15‚ÇΩ`,
            user_id: context.likerId
        }).catch(err => {});

    } catch (err) { console.log(err); } finally { await client.close(); }
})

// –ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä
vk.updates.start().then(() => {
    console.log(`[‚úÖ] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`)
}).catch((err) => {
    console.log(`[‚ùå] –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—à–∏–±–∫–∞: ${err}`)
})

// << ----------------------------------------------------------------------------------------------------- >>
// –ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function quiz(peerId) {
    const primerRandom = random.int(1, 3);
    const numberBonus = random.int(10, 50);
    let first_number;
    let symbol;
    let second_number;

    switch (primerRandom) {
        case 1: {
            first_number = random.int(0, 255);
            symbol = `+`;
            second_number = random.int(0, 255);
            break;
        }
        case 2: {
            first_number = random.int(100, 255);
            symbol = `-`;
            second_number = random.int(0, 99);
            break;
        }
        case 3: {
            first_number = random.int(1, 15);
            symbol = `*`;
            second_number = random.int(1, 15);
            break;
        }
    }

    const primer = `${first_number} ${symbol} ${second_number}`;
    const answer = eval(primer);

    await vk.api.messages.send({
        random_id: random.int(0, 999999),
        message: `‚ö† –ú–ê–¢–ò–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –í–ò–ö–¢–û–†–ò–ù–ê!\n${first_number} ${symbol} ${second_number} = ?\n\n–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –¥–∞—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–ª—É—á–∏—Ç 0.${numberBonus} —Ä—É–±–ª–µ–π.\n\n–§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: –û—Ç–≤–µ—Ç [–æ—Ç–≤–µ—Ç]\n\nüí† –ü—Ä–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤. –ü—Ä–∏–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.10-0.50 —Ä—É–±–ª–µ–π.`,
        peer_id: peerId
    }).catch(err => {})

    try {
        await client.connect();

        const conv = await convs.findOne({ id: peerId });
        if (!conv) {
            const data = {
                id: peerId,
                quiz: {
                    answer: null,
                    value: null,
                    prize: 0
                }
            };
            await convs.insertOne(data);
        }

        setTimeout(async () => {
            await client.connect();

            await vk.api.messages.send({
                random_id: random.int(0, 999999),
                message: `‚õî –ù–∏–∫—Ç–æ –Ω–µ –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ 20 —Å–µ–∫—É–Ω–¥...\n\nüëë –û—Ç–≤–µ—Ç: ${answer}`,
                peer_id: peerId
            }).catch(err => {});
            
            await convs.updateOne({ id: peerId }, { $set: { "quiz.answer": null, "quiz.value": null, "quiz.prize": 0 } });

            await vk.api.messages.send({
                random_id: random.int(0, 999999),
                message: `üï∞ –°–ª–µ–¥—É—é—â–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`,
                peer_id: peerId
            }).catch(err => {});
        }, 20 * 1000);

        await convs.updateOne({ id: peerId }, { $set: { "quiz.answer": answer, "quiz.value": primer, "quiz.prize": numberBonus } });
    } catch (err) { console.log(err); } finally { await client.close(); }
}
  
cron.schedule('0 0 0,2,4,6,8,10,12,14,16,18,20,22 * * *', async () => {
    await quiz(cfg.peers.game);
});